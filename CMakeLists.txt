###
# Author:       Tianze Wang
# Email:        tw19j@fsu.edu
# Modified:     11-25-2023
# Copyright:    Optimal Robotics Lab @The Florida State University
# Note: The GeometricKinematics and AnalyticalKinematicsDynamics are generated by FROST and adapted from https://github.com/GTLIDAR/digit_controller
###

cmake_minimum_required(VERSION 3.14.1)
project(Digit_Ros)

## Compile as C++11, supported in ROS Kinetic and newer
# add_compile_options(-std=c++11)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages

find_package(catkin REQUIRED COMPONENTS
  roscpp
  roslib
  rospy
  std_msgs
  sensor_msgs
  message_generation
  genmsg
)

find_package(OsqpEigen REQUIRED)

add_message_files(
  FILES
  digit_state.msg
)

generate_messages(
  DEPENDENCIES
  std_msgs
  sensor_msgs
)


catkin_package(
  CATKIN_DEPENDS message_runtime
)

catkin_install_python(PROGRAMS scripts/keyinput.py
  scripts/websockets_node.py
  DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
)

# include all the directories used for compile
set(Home_Dir ${CMAKE_CURRENT_SOURCE_DIR}) 

include_directories(/libartl
  include/GeometricKinematics
  include/AnalyticalKinematicsDynamics
  include/Eigen/
  ${Home_Dir}/include/Eigen
  ${Home_Dir}/include
  ${Home_Dir}/include/cpptoml)
  
include_directories(
# include
  ${catkin_INCLUDE_DIRS}
)

add_subdirectory(include/GeometricKinematics)
add_subdirectory(include/AnalyticalKinematicsDynamics)

# include low-level-api from Agility
set(Digit_Source 
	lowlevelapi.c
	lowlevelapi.h
	libartl/artl.c
	libartl/artl.h
	libartl/artl_internal.c
	libartl/artl_internal.h
	libartl/crc32c.c
	libartl/crc32c.h
	libartl/zstd/zstd.c
	libartl/zstd/zstd.h
        src/kin_left_arm.cpp
	src/kin_right_arm.cpp)
	

set(standing_SOURCESV2 standing_controlV2.cpp src/input_listener.cpp
${Digit_Source})

set(digit_main_source src/digit_main.cpp src/input_listener.cpp
${Digit_Source})

# the followings are the costum libraries used for your controller
add_library(digit_safety_lib STATIC src/Digit_safety.cpp)
target_include_directories(digit_safety_lib 
    PUBLIC 
    ${Home_Dir}/include)

add_library(osc_lib STATIC src/OSC_Control.cpp)
target_include_directories(osc_lib 
    PUBLIC 
    ${Home_Dir}/include)
target_link_libraries(osc_lib OsqpEigen::OsqpEigen)

add_library(filter_lib STATIC src/Filter.cpp)
target_include_directories(filter_lib 
    PUBLIC 
    ${Home_Dir}/include)

# the following will be executable to control Digit
# a simple standing controller implementation
add_executable(standing_controlV2 ${standing_SOURCESV2})
target_link_libraries(standing_controlV2 OsqpEigen::OsqpEigen kinematics_dynamics_lib digit_safety_lib osc_lib filter_lib ${catkin_LIBRARIES})
add_dependencies(standing_controlV2 Digit_Ros_generate_messages_cpp)

# walking controller
add_executable(digit_main ${digit_main_source})
target_link_libraries(digit_main OsqpEigen::OsqpEigen kinematics_dynamics_lib digit_safety_lib osc_lib filter_lib ${catkin_LIBRARIES})
add_dependencies(digit_main Digit_Ros_generate_messages_cpp)

